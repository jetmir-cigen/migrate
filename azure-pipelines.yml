trigger:
- main
- staging
- dev

resources:
  repositories:
    - repository: CI_Template
      endpoint: skytechrepos
      type: git
      name: 'Project Stardust/CI_Template'
      ref: refs/heads/main
    - repository: CD_Template
      endpoint: skytechrepos
      type: git
      name: 'Project Stardust/CD_Template'
      ref: refs/heads/main


pool:
  vmImage: ubuntu-latest

variables:
  - ${{ if eq(variables['build.sourceBranch'], 'refs/heads/dev') }}:
    - template: /vars/ManagerApi/development/vars.yml@CI_Template
  - ${{ if eq(variables['build.sourceBranch'], 'refs/heads/staging') }}:
    - template: /vars/ManagerApi/staging/vars.yml@CI_Template
  - ${{ if eq(variables['build.sourceBranch'], 'refs/heads/main') }}:
    - template: /vars/ManagerApi/main/vars.yml@CI_Template

stages:
  - stage: Build
    displayName: Build and Push Docker Image
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self
        - checkout: CD_Template
          persistCredentials: true
        - task: Docker@2
          displayName: Docker login
          inputs:
            containerRegistry: $(DOCKER_REGISTRY_SERVICE_CONNECTION)
            command: 'login'
        - task: AzureCLI@2
          displayName: Docker Build and push - dev
          condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
          inputs:
            azureSubscription: "azure-dev-subscription"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              cd "Manager API"
              az acr build -t "$(IMAGE_REPOSITORY):$(Build.BuildId)" -r stardustcontainerregistryy --platform linux .
        - task: AzureCLI@2
          displayName: Docker Build and push - production
          condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
          inputs:
            azureSubscription: "prod-sc"
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              cd "Manager API"
              az acr build -t "$(IMAGE_REPOSITORY):$(Build.BuildId)" -r prodstardustcontainerregistry --platform linux .
        - script: |
            cd CD_Template
            sudo snap install yq
            git pull
            git checkout main

            export FULL_IMAGE="$(IMAGE_REGISTRY)/$(IMAGE_REPOSITORY):$(Build.BuildId)"

            yq -i 'select(.kind == "CronJob") |= .spec.jobTemplate.spec.template.spec.containers[0].image = strenv(FULL_IMAGE)' $(FILE)
            yq -i 'select(.kind == "Deployment") |= .spec.template.spec.containers[0].image = strenv(FULL_IMAGE)' $FILE

            git config --global user.email "devops@cigen.me"
            git config --global user.name "cd-pipeline.cigen"
            git add .
            git commit -m "update manifest for argocd"
            git push origin HEAD:main --force